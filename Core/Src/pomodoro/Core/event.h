#ifndef EVENT_H
#define EVENT_H

#include <stdint.h>
#include "pomodoro.h"

/**
 * @file event.h
 * @brief Event dispatcher for Pomodoro application.
 *
 * This module defines events generated by the UI and dispatches them
 * to the Pomodoro core logic.
 */

/**
 * @brief Events coming from UI layer.
 */
typedef enum {
    EVENT_START,     /**< Start Pomodoro session */
    EVENT_PAUSE,     /**< Pause current session */
    EVENT_RESUME,    /**< Resume paused session */
    EVENT_RESET,     /**< Reset Pomodoro to idle */
    EVENT_SETTINGS,  /**< Settings updated (e.g., durations, cycles) */
    EVENT_TICK       /**< Optional: UI requests a tick update */
} EventType_e;

/**
 * @brief Settings data structure (used with EVENT_SETTINGS).
 */
typedef struct {
    int work_min;           /**< Work duration in minutes */
    int short_break_min;    /**< Short break duration in minutes */
    int long_break_min;     /**< Long break duration in minutes */
    int cycles_before_long;  /**< Number of cycles before long break */
} PomodoroSettings_t;

/**
 * @brief Initialize the event system.
 */
void event_init(void);

/**
 * @brief Dispatch an event from UI to Core.
 *
 * @param type The event type (start, pause, resume, reset, etc.)
 * @param data Optional pointer to event-specific data (NULL if not needed).
 */
void event_dispatch(EventType_e type, void *data);

#endif // EVENT_H
